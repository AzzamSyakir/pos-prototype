openapi: 3.1.1
info:
  title: Pos-Prototype
  description: A simple POS API for restaurants and caf√©s. It is optimized for tablet-based mobile applications, supporting authentication, transactions, and reporting. Future releases may expand to smartphone apps, but the current focus is on tablets as the main POS device.
  version: 1.0.0
  contact:
    name: Developer
    email: azzam.sykir.work@gmail.com
externalDocs:
  description: GitHub Repository
  url: https://github.com/AzzamSyakir/pos-prototype
servers:
  - url: https://pos-prototype-api.azzamsyakir.com
    description: Production server (HTTPS)
  - url: http://localhost:8080
    description: Local test server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter your bearer token in the format **Bearer <token>**
  schemas:
    #Register components
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
          description: Full name of the user. This field is optional; either name, email, or both can be provided.
          example: John Doe
        email:
          type: string
          format: email
          description: Unique email address of the user, used for authentication and communication.
          example: john.doe@example.com
        password:
          type: string
          format: password
          description: Password chosen by the user. It will be securely stored in the database after being hashed using the bcrypt algorithm.
          example: StrongPassword123!
        phone_number:
          type: string
          description: Users phone number. This field is optional and can be used as an alternative contact method.
          example: 081234567890
      required:
        - email
        - password
    RegisterSuccessResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
          description: HTTP-like status code for the response.
        message:
          type: string
          example: Register success
          description: Response message indicating the result of the registration.
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: d12f3a45-6789-4bcd-9ef0-123456789abc
              description: Unique identifier of the registered user.
            name:
              type: string
              example: John Doe
              description: Full name of the registered user.
            email:
              type: string
              format: email
              example: john.doe@example.com
              description: Email address of the registered user.
            password:
              type: string
              example: $2b$12$abcdefghijk1234567890lmnopqrstuvwxYZabcdEFGHijkLmNOpq
              description: Hashed password stored securely in the database.
            phone_number:
              type: string
              example: "081234567890"
              description: Phone number of the registered user.
            stripe_customer_id:
              type: string
              example: cus_1234567890abcdef
              description: Stripe customer ID linked to the registered user.
            created_at:
              type: string
              format: date-time
              example: "2025-09-04T07:13:38.484Z"
              description: Timestamp when the user was created.
            updated_at:
              type: string
              format: date-time
              example: "2025-09-04T07:13:38.484Z"
              description: Timestamp when the user was last updated.
    #LoginComponents
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: example.user@example.com
        password:
          type: string
          format: password
          example: strongpassword123
      required:
        - email
        - password
    LoginSuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: SignIn succeeded
        data:
          type: object
          properties:
            access_token:
              type: string
            refresh_token:
              type: string
            token_type:
              type: string
            expires_in:
              type: integer
        status_code:
          type: integer
          example: 200
    #GenerateToken components
    GenerateTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          description: The refresh token to generate a new access token.
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
      required:
        - refresh_token
    GenerateTokenSuccessResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: GenerateToken success
        data:
          type: object
          properties:
            access_token:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.accessTokenExample123
                expiry:
                  type: string
                  example: 5m
            refresh_token:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.refreshTokenExample456
                expiry:
                  type: string
                  example: 1d

  examples:
    #CreateTransaction components
    #Request component examples
    CardTransactionRequestExample:
      summary: Card Payment Request
      description: Example request body when user chooses **card** as payment method.
      value:
        payment_method: "card"
        amount: 10000

    PaymentLinkTransactionRequestExample:
      summary: Payment Link Transaction Request
      description: Example request body for creating a transaction using payment link method.
      value:
        payment_method: payment_link
        amount: 10000

    components:
      examples:
    AchDirectDebitTransactionRequestExample:
      summary: Example request for ACH Direct Debit transaction
      value:
        payment_method: "ach_direct_debit"
        amount: 10000
        accountholderName: "tes-account-holder"
        accountNumber: "000123456789"
        routingNumber: "110000000"

    SepaDebitTransactionRequestExample:
      summary: Example request for SEPA Debit transaction
      value:
        payment_method: "sepa_debit"
        amount: 10000
        accountholderName: "tes-account-holder"
        iban: "DE89370400440532013000"

    #Response component examples

    CardTransactionResponseExample:
      summary: Example for Card Payment
      value:
        code: 201
        message: "Transaction created successfully"
        data:
          transaction:
            id: "91acf6ba-a870-48ae-8abe-a95e541dd760"
            payment_method: "card"
          payment:
            id: "pi_3S3pPi0n1QLgTZ9K0yhOvNSp"
            object: "payment_intent"
            amount: 10000
            status: "succeeded"

    PaymentLinkTransactionResponseExample:
      summary: Example for Payment Link
      value:
        code: 201
        message: "Transaction created successfully"
        data:
          transaction:
            id: "9db85fdf-60ec-48dc-8851-aecf9a45ae57"
            payment_method: "payment_link"
          payment:
            id: "plink_1S3paY0n1QLgTZ9K2mqccX3x"
            object: "payment_link"
            url: "https://buy.stripe.com/test_9B6cMX51E2Dp2AX2HC3Je01"

    AchDirectDebitTransactionResponseExample:
      summary: Example for ACH Direct Debit
      value:
        code: 201
        message: "Transaction created successfully"
        data:
          transaction:
            id: "16c6ce23-7e68-4a4e-aa5c-3b99f1005be0"
            payment_method: "ach_direct_debit"
          payment:
            hosted_verification_url: "https://payments.stripe.com/microdeposit/..."
            microdeposit_type: "descriptor_code"

    SepaDebitTransactionResponseExample:
      summary: Example for SEPA Debit
      value:
        code: 201
        message: "Transaction created successfully"
        data:
          transaction:
            id: "20a790ed-f74a-487a-9208-429f4466c464"
            payment_method: "sepa_debit"
          payment:
            id: "pi_3S3pbT0n1QLgTZ9K1Perz7as"
            object: "payment_intent"
            currency: "eur"
            status: "processing"
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Transaction created successfully
        data:
          type: object
          properties:
            transaction:
              type: object
              properties:
                id:
                  {
                    type: string,
                    example: "20a790ed-f74a-487a-9208-429f4466c464",
                  }
                payment_method: { type: string, example: sepa_debit }
            payment:
              type: object
              example:
                id: pi_3S3pbT0n1QLgTZ9K1Perz7as
                object: payment_intent
                currency: eur
                status: processing

security:
  - bearerAuth: []
tags:
  - name: Authentication
    description: Handles user authentication, including account registration, login, and secure token management.
  - name: Transactions
    description: Covers sales transaction operations, such as creating new transactions and retrieving transaction records.
paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: "This endpoint creates a new user account and automatically provisions a Stripe customer for balance separation. The user's password is securely hashed using the bcrypt algorithm before being stored in the database."
      operationId: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterSuccessResponse"
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate a user and obtain access and refresh tokens
      description: "This endpoint authenticates a user by verifying their credentials, including password validation using the bcrypt hashing algorithm. A new access token and a new refresh token will be generated for the user upon successful authentication"
      operationId: SignIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccessResponse"
  /api/auth/logout:
    patch:
      tags:
        - Authentication
      summary: Logout a user
      description: "This endpoint logs out a user by deleting the refresh token stored in Redis.  **Note:**To try this endpoint, click the ``Authorize`` button (lock icon) and provide the refresh_token obtained from the Login endpoint response."
      operationId: Logout
      responses:
        "200":
          description: New access token generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponse"
  /api/auth/generate-token:
    patch:
      tags:
        - Authentication
      summary: Generate a new access and refresh token using a valid refresh token
      description: "This endpoint generates a new access token and a new refresh token for a user. The previously stored refresh token in Redis will be invalidated automatically. This API is typically called by a scheduled process to refresh the access token when it expires.  **Note:**To try this endpoint, click the ``Authorize`` button (lock icon) and provide the refresh_token obtained from the Login endpoint response."
      operationId: GenerateToken
      responses:
        "200":
          description: New access token generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerateTokenSuccessResponse"
  /api/transaction:
    post:
      tags:
        - Transactions
      summary: Create a New Transaction
      description: >
        This endpoint creates a new transaction and securely stores the transaction
        data in the database. After the transaction is created, the process will
        continue by triggering the Stripe payment gateway based on the payment
        method selected by the user.

        **Note:** To try this endpoint, click the **Authorize** button (lock icon)
        and provide the `access_token` obtained from the Login or Generate Token response.
      operationId: CreateNewTransaction
      requestBody:
        required: true
        content:
          application/json:
            examples:
              cardRequest:
                $ref: "#/components/examples/CardTransactionRequestExample"
              paymentLinkRequest:
                $ref: "#/components/examples/PaymentLinkTransactionRequestExample"
              achDirectDebitRequest:
                $ref: "#/components/examples/AchDirectDebitTransactionRequestExample"
              sepaDebitRequest:
                $ref: "#/components/examples/SepaDebitTransactionRequestExample"

      responses:
        "201":
          description: New transaction created successfully
          content:
            application/json:
              examples:
                cardResponse:
                  $ref: "#/components/examples/CardTransactionResponseExample"
                paymentLinkResponse:
                  $ref: "#/components/examples/PaymentLinkTransactionResponseExample"
                achDirectDebitResponse:
                  $ref: "#/components/examples/AchDirectDebitTransactionResponseExample"
                sepaDebitResponse:
                  $ref: "#/components/examples/SepaDebitTransactionResponseExample"
